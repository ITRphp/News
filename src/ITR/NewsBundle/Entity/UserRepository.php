<?php

namespace ITR\NewsBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    public function findUserByEmail($email){
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.user_email = :user_email' )
            ->setParameter('user_email', $email)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getResult();
            
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
                $email
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }
    
    public function loadUserByUsername($user_name){
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.user_name = :user_name AND u.user_active = :user_active')
            ->setParameter('user_name', $user_name)
            ->setParameter('user_active', TRUE)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
            
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
                $user_name
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }
    
    public function refreshUser(UserInterface $user){
        $class = get_class($user);
            if (!$this->supportsClass($class)) {
                throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }
        return $this->loadUserByUsername($user->getUsername());
    }
    
    public function supportsClass($class) {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());

    }
    
    
    
}
